%YAML 1.2
---
name: UL4
file_extensions: [ul4]
first_line_match: <\?\s*ul4\s+.*\?>
scope: source.ul4
version: 2

contexts:
  main:
    - match: (<\?)\s*(ul4)\s+([a-zA-Z_][a-zA-Z_0-9]*)?\b
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.other.signature.ul4
        3: entity.name.function.ul4
      push: tag_ul4

    - match: (<\?)\s*(doc)\b
      captures:
        1: punctuation.definition.comment.ul4
        2: comment.block.documentation.doc.ul4
      push: tag_doc

    - match: (<\?)\s*(note)\b
      captures:
        1: punctuation.definition.comment.ul4
        2: comment.block.note.ul4
      push: tag_note

    - match: (<\?)\s*(ignore)\s*(\?>)
      captures:
        1: punctuation.definition.comment.ul4
        2: comment.block.ignore.ul4
        3: punctuation.definition.comment.ul4
      push: tag_ignore

    - match: (<\?)\s*(whitespace)\s+((keep|strip|smart)|(.*))(\?>)
      scope: meta.embedded.block.ul4.whitespace
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.other.whitespace.ul4
        4: support.constant.ul4
        5: invalid.illegal.ul4
        6: punctuation.section.embedded.end.ul4

    - match: (<\?)\s*(end)\s*(\?>)
      scope: meta.embedded.block.ul4.end
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.other.end.ul4
        3: punctuation.section.embedded.end.ul4

    - match: (<\?)\s*(end)\s+(def)(\?>)
      scope: meta.embedded.block.ul4.end.def
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.control.end.ul4
        3: keyword.control.def.ul4
        4: punctuation.section.embedded.end.ul4

    - match: (<\?)\s*(end)\s+(renderblock)(\?>)
      scope: meta.embedded.block.ul4.end.renderblock
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.control.end.ul4
        3: keyword.control.renderblock.ul4
        4: punctuation.section.embedded.end.ul4

    - match: (<\?)\s*(end)\s+(renderblocks)(\?>)
      scope: meta.embedded.block.ul4.end.renderblocks
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.control.end.ul4
        3: keyword.control.renderblocks.ul4
        4: punctuation.section.embedded.end.ul4

    - match: (<\?)\s*(end)\s+(for)(\?>)
      scope: meta.embedded.block.ul4.end.for
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.control.end.ul4
        3: keyword.control.for.ul4
        4: punctuation.section.embedded.end.ul4

    - match: (<\?)\s*(end)\s+(while)(\?>)
      scope: meta.embedded.block.ul4.end.while
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.control.end.ul4
        3: keyword.control.while.ul4
        4: punctuation.section.embedded.end.ul4

    - match: (<\?)\s*(end)\s+(if)(\?>)
      scope: meta.embedded.block.ul4.endif.
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.control.end.ul4
        3: keyword.control.if.ul4
        4: punctuation.section.embedded.end.ul4

    - match: (<\?)\s*(end)\s+(while)(\?>)
      scope: meta.embedded.block.ul4.end.while
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.control.end.ul4
        3: keyword.control.while.ul4
        4: punctuation.section.embedded.end.ul4

    - match: (<\?)\s*(end)\s+(.*)(\?>)
      scope: meta.embedded.block.ul4.end
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.control.end.ul4
        3: invalid.illegal.ul4
        4: punctuation.section.embedded.end.ul4

    - match: (<\?)\s*(def)\s+([a-zA-Z_][a-zA-Z_0-9]*)\b
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.control.def.ul4
        3: entity.name.function.ul4
      push: tag_def

    - match: (<\?)\s*(renderblock)\b
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.control.renderblock.ul4
      push: tag_renderblock

    - match: (<\?)\s*(renderblocks)\b
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.control.renderblocks.ul4
      push: tag_renderblocks

    - match: (<\?)\s*(printx)\b
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.other.printx.ul4
      push: tag_printx

    - match: (<\?)\s*(print)\b
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.other.print.ul4
      push: tag_print

    - match: (<\?)\s*(for)\b
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.control.for.ul4
      push: tag_for

    - match: (<\?)\s*(while)\b
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.control.while.ul4
      push: tag_while

    - match: (<\?)\s*(if)\b
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.control.if.ul4
      push: tag_if

    - match: (<\?)\s*(elif)\b
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.control.elif.ul4
      push: tag_elif

    - match: (<\?)\s*(else)\s*(\?>)
      scope: meta.embedded.block.ul4.else
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.control.else.ul4
        3: punctuation.section.embedded.end.ul4

    - match: (<\?)\s*(break)\s*(\?>)
      scope: meta.embedded.block.ul4.break
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.control.break.ul4
        3: punctuation.section.embedded.end.ul4

    - match: (<\?)\s*(continue)\s*(\?>)
      scope: meta.embedded.block.ul4.continue
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.control.continue.ul4
        3: punctuation.section.embedded.end.ul4

    - match: (<\?)\s*(renderx)\b
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.other.renderx.ul4
      push: tag_renderx

    - match: (<\?)\s*(render)\b
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.other.render.ul4
      push: tag_render

    - match: (<\?)\s*(return)\b
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.control.return.ul4
      push: tag_return

    - match: (<\?)\s*(code)\b
      captures:
        1: punctuation.section.embedded.begin.ul4
        2: keyword.other.code.ul4
      push: tag_code

  expr:
    - match: \b([0-9]+)\b
      captures:
        1: constant.numeric.integer.ul4

    - match: \b(0o[0-9]+)\b
      captures:
        1: constant.numeric.octal.ul4

    - match: \b(0x[0-9a-fA-F]+)\b
      captures:
        1: constant.numeric.hex.ul4

    - match: \b(0b[01]+)\b
      captures:
        1: constant.numeric.bin.ul4

    - match: \b([0-9]+\.[0-9]*[eE][+-]?[0-9]+)\b
      captures:
        1: constant.numeric.float.ul4

    - match: \b(\.[0-9]+[eE][+-]?[0-9]+)?\b
      captures:
        1: constant.numeric.float.ul4

    - match: \b([0-9]+[eE][+-]?[0-9]+)\b
      captures:
        1: constant.numeric.float.ul4

    - match: (#[0-9a-fA-F]{8})\b
      captures:
        1: constant.other.color.rgb-value.ul4

    - match: (#[0-9a-fA-F]{6})\b
      captures:
        1: constant.other.color.rgb-value.ul4

    - match: (#[0-9a-fA-F]{3,4})\b
      captures:
        1: constant.other.color.rgb-value.ul4

    - match: (@\(\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}(:\d{2}(\.\d{6})?)?)?\))
      captures:
        1: constant.other.date.ul4

    - match: \b(and|or|not|is|in|if|else|for)\b
      captures:
        1: keyword.operator.logical.ul4

    - match: \b(None)\b
      captures:
        1: constant.language.none.ul4

    - match: \b(True|False)\b
      captures:
        1: constant.language.bool.ul4

    - match: (\+|-|\*|//|/|%|<<|>>)
      captures:
        1: keyword.operator.arithmetic.ul4

    - match: (\+=|-=|\*=|//=|/=|%=|<<=|>>=|=)
      captures:
        1: keyword.operator.assignment.ul4

    - match: (,|\.)
      captures:
        1: keyword.operator.other.ul4

    - match: \b(now|utcnow|today|date|datetime|timedelta|monthdelta|random|xmlescape|csv|str|repr|ascii|int|float|bool|list|set|len|any|all|enumerate|enumfl|isfirstlast|isfirst|islast|isundefined|isdefined|isnone|isstr|isint|isfloat|isbool|isdate|isdatetime|islist|isset|isdict|istemplate|isfunction|iscolor|istimedelta|ismonthdelta|isexception|chr|ord|hex|oct|bin|abs|range|slice|min|max|sum|first|last|sorted|type|asjson|fromjson|asul4on|fromul4on|reversed|randrange|randchoice|format|urlquote|urlunquote|zip|rgb|hls|hsv|round|md5|scrypt|getattr|hasattr|setattr|dir)\b
      captures:
        1: support.function.ul4

    - match: \b(ul4on)\b
      captures:
        1: support.module.ul4

    - match: "'''"
      push: tristring1

    - match: '"""'
      push: tristring2

    - match: "'"
      push: string1

    - match: '"'
      push: string2

  tag_doc:
    - meta_scope: comment.block.documentation.ul4, meta.embedded.block.ul4.doc
    - match: (\?>)
      captures:
        1: punctuation.definition.comment.ul4
      pop: true

  tag_note:
    - meta_scope: comment.block.ul4, meta.embedded.block.ul4.note
    - match: (\?>)
      captures:
        1: punctuation.definition.comment.ul4
      pop: true

  tag_ignore:
    - meta_scope: comment.block.ignore.ul4
    - match: (<\?)\s*(ignore)\s*(\?>)
      captures:
        1: punctuation.definition.comment.ul4
        2: entity.tag.name
        3: punctuation.definition.comment.ul4
      push: tag_ignore

    - match: (<\?)\s*(end)\s+(ignore)\s*(\?>)
      captures:
        1: punctuation.definition.comment.ul4
        2: entity.tag.name
        3: entity.tag.name
        4: punctuation.definition.comment.ul4
      pop: true

  tag_ul4:
    - meta_scope: meta.embedded.block.ul4.ul4
    - include: expr
    - match: (\?>)
      captures:
        1: punctuation.section.embedded.end.ul4
      pop: true

  tag_for:
    - meta_scope: meta.embedded.block.ul4.for
    - include: expr
    - match: (\?>)
      captures:
        1: punctuation.section.embedded.end.ul4
      pop: true

  tag_while:
    - meta_scope: meta.embedded.block.ul4.while
    - include: expr
    - match: (\?>)
      captures:
        1: punctuation.section.embedded.end.ul4
      pop: true

  tag_def:
    - meta_scope: meta.embedded.block.ul4.def
    - include: expr
    - match: (\?>)
      captures:
        1: punctuation.section.embedded.end.ul4
      pop: true

  tag_renderblock:
    - meta_scope: meta.embedded.block.ul4.renderblock
    - include: expr
    - match: (\?>)
      captures:
        1: punctuation.section.embedded.end.ul4
      pop: true

  tag_renderblocks:
    - meta_scope: meta.embedded.block.ul4.renderblocks
    - include: expr
    - match: (\?>)
      captures:
        1: punctuation.section.embedded.end.ul4
      pop: true

  tag_printx:
    - meta_scope: meta.embedded.block.ul4.printx
    - include: expr
    - match: (\?>)
      captures:
        1: punctuation.section.embedded.end.ul4
      pop: true

  tag_print:
    - meta_scope: meta.embedded.block.ul4.print
    - include: expr
    - match: (\?>)
      captures:
        1: punctuation.section.embedded.end.ul4
      pop: true

  tag_if:
    - meta_scope: meta.embedded.block.ul4.if
    - include: expr
    - match: (\?>)
      captures:
        1: punctuation.section.embedded.end.ul4
      pop: true

  tag_elif:
    - meta_scope: meta.embedded.block.ul4.elif
    - include: expr
    - match: (\?>)
      captures:
        1: punctuation.section.embedded.end.ul4
      pop: true

  tag_render:
    - meta_scope: meta.embedded.block.ul4.render
    - include: expr
    - match: (\?>)
      captures:
        1: punctuation.section.embedded.end.ul4
      pop: true

  tag_renderx:
    - meta_scope: meta.embedded.block.ul4.renderx
    - include: expr
    - match: (\?>)
      captures:
        1: punctuation.section.embedded.end.ul4
      pop: true

  tag_return:
    - meta_scope: meta.embedded.block.ul4.return
    - include: expr
    - match: (\?>)
      captures:
        1: punctuation.section.embedded.end.ul4
      pop: true

  tag_code:
    - meta_scope: meta.embedded.block.ul4.code
    - include: expr
    - match: (\?>)
      captures:
        1: punctuation.section.embedded.end.ul4
      pop: true

  stringescape:
    - match: \\\\
      scope: constant.character.escape.backslash.ul4
    - match: \\U[0-9a-fA-F]{8}
      scope: constant.character.escape.hex8.ul4
    - match: \\U.{8}
      scope: invalid.illegal.escape.hex8.ul4
    - match: \\u[0-9a-fA-F]{4}
      scope: constant.character.escape.hex4.ul4
    - match: \\u.{4}
      scope: invalid.illegal.escape.hex4.ul4
    - match: \\x[0-9a-fA-F]{2}
      scope: constant.character.escape.hex2.ul4
    - match: \\x..
      scope: invalid.illegal.escape.hex2.ul4
    - match: \\[abtnfr]
      scope: constant.character.escape.char.ul4
    - match: '\\"'
      scope: constant.character.escape.quote.ul4
    - match: "\\\\'"
      scope: constant.character.escape.quote.ul4
    - match: \\.
      scope: invalid.illegal.escape.char.ul4

  tristring1:
    - meta_scope: meta.string, string.quoted.triple.ul4
    - include: stringescape
    - match: "'''"
      pop: true

  tristring2:
    - meta_scope: meta.string, string.quoted.triple.ul4
    - include: stringescape
    - match: '"""'
      pop: true

  string1:
    - meta_scope: meta.string, string.quoted.single.ul4
    - include: stringescape
    - match: "'"
      pop: true

  string2:
    - meta_scope: meta.string, string.quoted.double.ul4
    - include: stringescape
    - match: '"'
      pop: true
